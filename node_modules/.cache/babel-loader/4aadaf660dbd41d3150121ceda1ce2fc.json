{"ast":null,"code":"/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react';\nimport computeCalendar from '../../../lib/charts/calendar/CalendarLayout';\nimport { CalendarPropTypes } from './props';\nimport { timeFormat } from 'd3-time-format';\nimport { DIRECTION_HORIZONTAL } from '../../../constants/directions';\nimport CalendarDay from './CalendarDay';\nimport CalendarMonthPath from './CalendarMonthPath';\nimport Container from '../Container';\nimport SvgWrapper from '../SvgWrapper';\nimport enhance from './enhance';\nvar monthLegendFormat = timeFormat('%b');\n\nvar Calendar = function Calendar(_ref) {\n  var data = _ref.data,\n      from = _ref.from,\n      to = _ref.to,\n      colorScale = _ref.colorScale,\n      margin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      outerWidth = _ref.outerWidth,\n      outerHeight = _ref.outerHeight,\n      direction = _ref.direction,\n      emptyColor = _ref.emptyColor,\n      yearSpacing = _ref.yearSpacing,\n      yearLegendOffset = _ref.yearLegendOffset,\n      daySpacing = _ref.daySpacing,\n      dayBorderWidth = _ref.dayBorderWidth,\n      dayBorderColor = _ref.dayBorderColor,\n      monthBorderWidth = _ref.monthBorderWidth,\n      monthBorderColor = _ref.monthBorderColor,\n      monthLegendOffset = _ref.monthLegendOffset,\n      theme = _ref.theme,\n      isInteractive = _ref.isInteractive,\n      tooltipFormat = _ref.tooltipFormat,\n      onClick = _ref.onClick;\n\n  var _computeCalendar = computeCalendar({\n    width: width,\n    height: height,\n    from: from,\n    to: to,\n    data: data,\n    direction: direction,\n    colorScale: colorScale,\n    emptyColor: emptyColor,\n    yearSpacing: yearSpacing,\n    daySpacing: daySpacing\n  }),\n      years = _computeCalendar.years,\n      months = _computeCalendar.months,\n      days = _computeCalendar.days;\n\n  return React.createElement(Container, {\n    isInteractive: isInteractive,\n    theme: theme\n  }, function (_ref2) {\n    var showTooltip = _ref2.showTooltip,\n        hideTooltip = _ref2.hideTooltip;\n    return React.createElement(SvgWrapper, {\n      width: outerWidth,\n      height: outerHeight,\n      margin: margin\n    }, days.map(function (d) {\n      return React.createElement(CalendarDay, {\n        key: d.date.toString(),\n        data: d,\n        x: d.x,\n        y: d.y,\n        size: d.size,\n        color: d.color,\n        borderWidth: dayBorderWidth,\n        borderColor: dayBorderColor,\n        showTooltip: showTooltip,\n        hideTooltip: hideTooltip,\n        tooltipFormat: tooltipFormat,\n        theme: theme,\n        onClick: onClick\n      });\n    }), months.map(function (m) {\n      return React.createElement(CalendarMonthPath, {\n        key: m.date.toString(),\n        path: m.path,\n        borderWidth: monthBorderWidth,\n        borderColor: monthBorderColor\n      });\n    }), months.map(function (month) {\n      var transform = void 0;\n\n      if (direction === DIRECTION_HORIZONTAL) {\n        transform = 'translate(' + (month.bbox.x + month.bbox.width / 2) + ',' + (month.bbox.y - monthLegendOffset) + ')';\n      } else {\n        transform = 'translate(' + (month.bbox.x - monthLegendOffset) + ',' + (month.bbox.y + month.bbox.height / 2) + ') rotate(-90)';\n      }\n\n      return React.createElement('text', {\n        key: month.date.toString() + '.legend',\n        className: 'nivo_calendar_month_legend',\n        transform: transform,\n        textAnchor: 'middle'\n      }, monthLegendFormat(month.date));\n    }), years.map(function (year) {\n      var transform = void 0;\n\n      if (direction === DIRECTION_HORIZONTAL) {\n        transform = 'translate(' + (year.bbox.x - yearLegendOffset) + ',' + (year.bbox.y + year.bbox.height / 2) + ') rotate(-90)';\n      } else {\n        transform = 'translate(' + (year.bbox.x + year.bbox.width / 2) + ',' + (year.bbox.y - yearLegendOffset) + ')';\n      }\n\n      return React.createElement('text', {\n        key: year.year,\n        className: 'nivo_calendar_year_legend',\n        transform: transform,\n        textAnchor: 'middle'\n      }, year.year);\n    }));\n  });\n};\n\nCalendar.propTypes = CalendarPropTypes;\nexport default enhance(Calendar);","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/node_modules/nivo/es/components/charts/calendar/Calendar.js"],"names":["React","computeCalendar","CalendarPropTypes","timeFormat","DIRECTION_HORIZONTAL","CalendarDay","CalendarMonthPath","Container","SvgWrapper","enhance","monthLegendFormat","Calendar","_ref","data","from","to","colorScale","margin","width","height","outerWidth","outerHeight","direction","emptyColor","yearSpacing","yearLegendOffset","daySpacing","dayBorderWidth","dayBorderColor","monthBorderWidth","monthBorderColor","monthLegendOffset","theme","isInteractive","tooltipFormat","onClick","_computeCalendar","years","months","days","createElement","_ref2","showTooltip","hideTooltip","map","d","key","date","toString","x","y","size","color","borderWidth","borderColor","m","path","month","transform","bbox","className","textAnchor","year","propTypes"],"mappings":"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","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react';\nimport computeCalendar from '../../../lib/charts/calendar/CalendarLayout';\nimport { CalendarPropTypes } from './props';\nimport { timeFormat } from 'd3-time-format';\nimport { DIRECTION_HORIZONTAL } from '../../../constants/directions';\nimport CalendarDay from './CalendarDay';\nimport CalendarMonthPath from './CalendarMonthPath';\nimport Container from '../Container';\nimport SvgWrapper from '../SvgWrapper';\nimport enhance from './enhance';\n\nvar monthLegendFormat = timeFormat('%b');\n\nvar Calendar = function Calendar(_ref) {\n    var data = _ref.data,\n        from = _ref.from,\n        to = _ref.to,\n        colorScale = _ref.colorScale,\n        margin = _ref.margin,\n        width = _ref.width,\n        height = _ref.height,\n        outerWidth = _ref.outerWidth,\n        outerHeight = _ref.outerHeight,\n        direction = _ref.direction,\n        emptyColor = _ref.emptyColor,\n        yearSpacing = _ref.yearSpacing,\n        yearLegendOffset = _ref.yearLegendOffset,\n        daySpacing = _ref.daySpacing,\n        dayBorderWidth = _ref.dayBorderWidth,\n        dayBorderColor = _ref.dayBorderColor,\n        monthBorderWidth = _ref.monthBorderWidth,\n        monthBorderColor = _ref.monthBorderColor,\n        monthLegendOffset = _ref.monthLegendOffset,\n        theme = _ref.theme,\n        isInteractive = _ref.isInteractive,\n        tooltipFormat = _ref.tooltipFormat,\n        onClick = _ref.onClick;\n\n    var _computeCalendar = computeCalendar({\n        width: width,\n        height: height,\n        from: from,\n        to: to,\n        data: data,\n        direction: direction,\n        colorScale: colorScale,\n        emptyColor: emptyColor,\n        yearSpacing: yearSpacing,\n        daySpacing: daySpacing\n    }),\n        years = _computeCalendar.years,\n        months = _computeCalendar.months,\n        days = _computeCalendar.days;\n\n    return React.createElement(\n        Container,\n        { isInteractive: isInteractive, theme: theme },\n        function (_ref2) {\n            var showTooltip = _ref2.showTooltip,\n                hideTooltip = _ref2.hideTooltip;\n            return React.createElement(\n                SvgWrapper,\n                { width: outerWidth, height: outerHeight, margin: margin },\n                days.map(function (d) {\n                    return React.createElement(CalendarDay, {\n                        key: d.date.toString(),\n                        data: d,\n                        x: d.x,\n                        y: d.y,\n                        size: d.size,\n                        color: d.color,\n                        borderWidth: dayBorderWidth,\n                        borderColor: dayBorderColor,\n                        showTooltip: showTooltip,\n                        hideTooltip: hideTooltip,\n                        tooltipFormat: tooltipFormat,\n                        theme: theme,\n                        onClick: onClick\n                    });\n                }),\n                months.map(function (m) {\n                    return React.createElement(CalendarMonthPath, {\n                        key: m.date.toString(),\n                        path: m.path,\n                        borderWidth: monthBorderWidth,\n                        borderColor: monthBorderColor\n                    });\n                }),\n                months.map(function (month) {\n                    var transform = void 0;\n                    if (direction === DIRECTION_HORIZONTAL) {\n                        transform = 'translate(' + (month.bbox.x + month.bbox.width / 2) + ',' + (month.bbox.y - monthLegendOffset) + ')';\n                    } else {\n                        transform = 'translate(' + (month.bbox.x - monthLegendOffset) + ',' + (month.bbox.y + month.bbox.height / 2) + ') rotate(-90)';\n                    }\n\n                    return React.createElement(\n                        'text',\n                        {\n                            key: month.date.toString() + '.legend',\n                            className: 'nivo_calendar_month_legend',\n                            transform: transform,\n                            textAnchor: 'middle'\n                        },\n                        monthLegendFormat(month.date)\n                    );\n                }),\n                years.map(function (year) {\n                    var transform = void 0;\n                    if (direction === DIRECTION_HORIZONTAL) {\n                        transform = 'translate(' + (year.bbox.x - yearLegendOffset) + ',' + (year.bbox.y + year.bbox.height / 2) + ') rotate(-90)';\n                    } else {\n                        transform = 'translate(' + (year.bbox.x + year.bbox.width / 2) + ',' + (year.bbox.y - yearLegendOffset) + ')';\n                    }\n\n                    return React.createElement(\n                        'text',\n                        {\n                            key: year.year,\n                            className: 'nivo_calendar_year_legend',\n                            transform: transform,\n                            textAnchor: 'middle'\n                        },\n                        year.year\n                    );\n                })\n            );\n        }\n    );\n};\n\nCalendar.propTypes = CalendarPropTypes;\n\nexport default enhance(Calendar);"]},"metadata":{},"sourceType":"module"}