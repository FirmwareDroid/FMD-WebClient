{"ast":null,"code":"import _get from 'lodash/get';\nimport _isArray from 'lodash/isArray';\nimport _isFunction from 'lodash/isFunction';\n/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { scaleOrdinal, schemeCategory10, schemeCategory20, schemeCategory20b, schemeCategory20c } from 'd3-scale';\nimport { schemeAccent, schemeDark2, schemePaired, schemePastel1, schemePastel2, schemeSet1, schemeSet2, schemeSet3 } from 'd3-scale-chromatic';\nvar ordinalColorScales = {\n  d310: scaleOrdinal(schemeCategory10),\n  d320: scaleOrdinal(schemeCategory20),\n  d320b: scaleOrdinal(schemeCategory20b),\n  d320c: scaleOrdinal(schemeCategory20c),\n  accent: scaleOrdinal(schemeAccent),\n  dark2: scaleOrdinal(schemeDark2),\n  paired: scaleOrdinal(schemePaired),\n  pastel1: scaleOrdinal(schemePastel1),\n  pastel2: scaleOrdinal(schemePastel2),\n  set1: scaleOrdinal(schemeSet1),\n  set2: scaleOrdinal(schemeSet2),\n  set3: scaleOrdinal(schemeSet3)\n};\nexport var nivoCategoricalColors = function nivoCategoricalColors() {\n  return scaleOrdinal(['#e8c1a0', '#f47560', '#f1e15b', '#e8a838', '#61cdbb', '#97e3d5']);\n};\n\nvar dataColor = function dataColor(d) {\n  return d.color || d.data.color;\n};\n\nexport var getColorRange = function getColorRange(instruction) {\n  if (instruction === 'data') return dataColor;\n  if (instruction === 'nivo') return nivoCategoricalColors();\n  if (_isFunction(instruction)) return instruction;\n  if (ordinalColorScales[instruction]) return ordinalColorScales[instruction];\n  if (_isArray(instruction)) return scaleOrdinal(instruction);\n  return function () {\n    return instruction;\n  };\n};\nexport var getColorsGenerator = function getColorsGenerator(colors, colorBy) {\n  // skip range, color should be bound to data\n  if (_isFunction(colorBy)) return colorBy;\n  var scale = void 0;\n\n  var getColorId = function getColorId(d) {\n    return _get(d, colorBy);\n  };\n\n  if (colors === 'nivo') {\n    // use default nivo categorical colors\n    scale = nivoCategoricalColors();\n  } else if (ordinalColorScales[colors]) {\n    // use predefined d3 ordinal color scale\n    scale = ordinalColorScales[colors];\n  } else if (_isArray(colors)) {\n    // user defined color range\n    scale = scaleOrdinal(colors);\n  } else {\n    // just use provided value, all elements will have identical color\n    return function (d) {\n      return colors;\n    };\n  }\n\n  return function (d) {\n    return scale(getColorId(d));\n  };\n};\nexport * from './inherit';\nexport * from './motion';\nexport * from './quantize';","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/node_modules/nivo/es/lib/colors/index.js"],"names":["_get","_isArray","_isFunction","scaleOrdinal","schemeCategory10","schemeCategory20","schemeCategory20b","schemeCategory20c","schemeAccent","schemeDark2","schemePaired","schemePastel1","schemePastel2","schemeSet1","schemeSet2","schemeSet3","ordinalColorScales","d310","d320","d320b","d320c","accent","dark2","paired","pastel1","pastel2","set1","set2","set3","nivoCategoricalColors","dataColor","d","color","data","getColorRange","instruction","getColorsGenerator","colors","colorBy","scale","getColorId"],"mappings":"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","sourcesContent":["import _get from 'lodash/get';\nimport _isArray from 'lodash/isArray';\nimport _isFunction from 'lodash/isFunction'; /*\n                                              * This file is part of the nivo project.\n                                              *\n                                              * Copyright 2016-present, Raphaël Benitte.\n                                              *\n                                              * For the full copyright and license information, please view the LICENSE\n                                              * file that was distributed with this source code.\n                                              */\n\nimport { scaleOrdinal, schemeCategory10, schemeCategory20, schemeCategory20b, schemeCategory20c } from 'd3-scale';\nimport { schemeAccent, schemeDark2, schemePaired, schemePastel1, schemePastel2, schemeSet1, schemeSet2, schemeSet3 } from 'd3-scale-chromatic';\n\nvar ordinalColorScales = {\n    d310: scaleOrdinal(schemeCategory10),\n    d320: scaleOrdinal(schemeCategory20),\n    d320b: scaleOrdinal(schemeCategory20b),\n    d320c: scaleOrdinal(schemeCategory20c),\n    accent: scaleOrdinal(schemeAccent),\n    dark2: scaleOrdinal(schemeDark2),\n    paired: scaleOrdinal(schemePaired),\n    pastel1: scaleOrdinal(schemePastel1),\n    pastel2: scaleOrdinal(schemePastel2),\n    set1: scaleOrdinal(schemeSet1),\n    set2: scaleOrdinal(schemeSet2),\n    set3: scaleOrdinal(schemeSet3)\n};\n\nexport var nivoCategoricalColors = function nivoCategoricalColors() {\n    return scaleOrdinal(['#e8c1a0', '#f47560', '#f1e15b', '#e8a838', '#61cdbb', '#97e3d5']);\n};\n\nvar dataColor = function dataColor(d) {\n    return d.color || d.data.color;\n};\n\nexport var getColorRange = function getColorRange(instruction) {\n    if (instruction === 'data') return dataColor;\n\n    if (instruction === 'nivo') return nivoCategoricalColors();\n\n    if (_isFunction(instruction)) return instruction;\n\n    if (ordinalColorScales[instruction]) return ordinalColorScales[instruction];\n\n    if (_isArray(instruction)) return scaleOrdinal(instruction);\n\n    return function () {\n        return instruction;\n    };\n};\n\nexport var getColorsGenerator = function getColorsGenerator(colors, colorBy) {\n    // skip range, color should be bound to data\n    if (_isFunction(colorBy)) return colorBy;\n\n    var scale = void 0;\n    var getColorId = function getColorId(d) {\n        return _get(d, colorBy);\n    };\n\n    if (colors === 'nivo') {\n        // use default nivo categorical colors\n        scale = nivoCategoricalColors();\n    } else if (ordinalColorScales[colors]) {\n        // use predefined d3 ordinal color scale\n        scale = ordinalColorScales[colors];\n    } else if (_isArray(colors)) {\n        // user defined color range\n        scale = scaleOrdinal(colors);\n    } else {\n        // just use provided value, all elements will have identical color\n        return function (d) {\n            return colors;\n        };\n    }\n\n    return function (d) {\n        return scale(getColorId(d));\n    };\n};\n\nexport * from './inherit';\nexport * from './motion';\nexport * from './quantize';"]},"metadata":{},"sourceType":"module"}