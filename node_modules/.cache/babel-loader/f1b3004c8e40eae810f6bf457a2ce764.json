{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['chartist'], function (chartist) {\n      return root.returnExportsGlobal = factory(chartist);\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(require('chartist'));\n  } else {\n    root['Chartist.plugins.legend'] = factory(root.Chartist);\n  }\n})(this, function (Chartist) {\n  /**\n   * This Chartist plugin creates a legend to show next to the chart.\n   *\n   */\n  'use strict';\n\n  var defaultOptions = {\n    className: '',\n    classNames: false,\n    removeAll: false,\n    legendNames: false,\n    clickable: true,\n    onClick: null,\n    position: 'top'\n  };\n  Chartist.plugins = Chartist.plugins || {};\n\n  Chartist.plugins.legend = function (options) {\n    function compareNumbers(a, b) {\n      return a - b;\n    } // Catch invalid options\n\n\n    if (options && options.position) {\n      if (!(options.position === 'top' || options.position === 'bottom' || options.position instanceof HTMLElement)) {\n        throw Error('The position you entered is not a valid position');\n      }\n\n      if (options.position instanceof HTMLElement) {\n        // Detatch DOM element from options object, because Chartist.extend currently chokes on circular references present in HTMLElements\n        var cachedDOMPosition = options.position;\n        delete options.position;\n      }\n    }\n\n    options = Chartist.extend({}, defaultOptions, options);\n\n    if (cachedDOMPosition) {\n      // Reattatch the DOM Element position if it was removed before\n      options.position = cachedDOMPosition;\n    }\n\n    return function legend(chart) {\n      var existingLegendElement = chart.container.querySelector('.ct-legend');\n\n      if (existingLegendElement) {\n        // Clear legend if already existing.\n        existingLegendElement.parentNode.removeChild(existingLegendElement);\n      } // Set a unique className for each series so that when a series is removed,\n      // the other series still have the same color.\n\n\n      if (options.clickable) {\n        var newSeries = chart.data.series.map(function (series, seriesIndex) {\n          if (typeof series !== 'object') {\n            series = {\n              value: series\n            };\n          }\n\n          series.className = series.className || chart.options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex);\n          return series;\n        });\n        chart.data.series = newSeries;\n      }\n\n      var legendElement = document.createElement('ul'),\n          isPieChart = chart instanceof Chartist.Pie;\n      legendElement.className = 'ct-legend';\n\n      if (chart instanceof Chartist.Pie) {\n        legendElement.classList.add('ct-legend-inside');\n      }\n\n      if (typeof options.className === 'string' && options.className.length > 0) {\n        legendElement.classList.add(options.className);\n      }\n\n      if (chart.options.width) {\n        legendElement.style.cssText = 'width: ' + chart.options.width + 'px;margin: 0 auto;';\n      }\n\n      var removedSeries = [],\n          originalSeries = chart.data.series.slice(0); // Get the right array to use for generating the legend.\n\n      var legendNames = chart.data.series,\n          useLabels = isPieChart && chart.data.labels && chart.data.labels.length;\n\n      if (useLabels) {\n        var originalLabels = chart.data.labels.slice(0);\n        legendNames = chart.data.labels;\n      }\n\n      legendNames = options.legendNames || legendNames; // Check if given class names are viable to append to legends\n\n      var classNamesViable = Array.isArray(options.classNames) && options.classNames.length === legendNames.length; // Loop through all legends to set each name in a list item.\n\n      legendNames.forEach(function (legend, i) {\n        var li = document.createElement('li');\n        li.className = 'ct-series-' + i; // Append specific class to a legend element, if viable classes are given\n\n        if (classNamesViable) {\n          li.className += ' ' + options.classNames[i];\n        }\n\n        li.setAttribute('data-legend', i);\n        li.textContent = legend.name || legend;\n        legendElement.appendChild(li);\n      });\n      chart.on('created', function (data) {\n        // Append the legend element to the DOM\n        if (!(options.position instanceof HTMLElement)) {\n          switch (options.position) {\n            case 'top':\n              chart.container.insertBefore(legendElement, chart.container.childNodes[0]);\n              break;\n\n            case 'bottom':\n              chart.container.insertBefore(legendElement, null);\n              break;\n          }\n        } else {\n          // Appends the legend element as the last child of a given HTMLElement\n          options.position.insertBefore(legendElement, null);\n        }\n      });\n\n      if (options.clickable) {\n        legendElement.addEventListener('click', function (e) {\n          var li = e.target;\n          if (li.parentNode !== legendElement || !li.hasAttribute('data-legend')) return;\n          e.preventDefault();\n          var seriesIndex = parseInt(li.getAttribute('data-legend')),\n              removedSeriesIndex = removedSeries.indexOf(seriesIndex);\n\n          if (removedSeriesIndex > -1) {\n            // Add to series again.\n            removedSeries.splice(removedSeriesIndex, 1);\n            li.classList.remove('inactive');\n          } else {\n            if (!options.removeAll) {\n              // Remove from series, only if a minimum of one series is still visible.\n              if (chart.data.series.length > 1) {\n                removedSeries.push(seriesIndex);\n                li.classList.add('inactive');\n              } // Set all series as active.\n              else {\n                  removedSeries = [];\n                  var seriesItems = Array.prototype.slice.call(legendElement.childNodes);\n                  seriesItems.forEach(function (item) {\n                    item.classList.remove('inactive');\n                  });\n                }\n            } else {\n              // Remove series unaffected if it is the last or not\n              removedSeries.push(seriesIndex);\n              li.classList.add('inactive');\n            }\n          } // Reset the series to original and remove each series that\n          // is still removed again, to remain index order.\n\n\n          var seriesCopy = originalSeries.slice(0);\n\n          if (useLabels) {\n            var labelsCopy = originalLabels.slice(0);\n          } // Reverse sort the removedSeries to prevent removing the wrong index.\n\n\n          removedSeries.sort(compareNumbers).reverse();\n          removedSeries.forEach(function (series) {\n            seriesCopy.splice(series, 1);\n\n            if (useLabels) {\n              labelsCopy.splice(series, 1);\n            }\n          });\n\n          if (options.onClick) {\n            options.onClick(chart, e);\n          }\n\n          chart.data.series = seriesCopy;\n\n          if (useLabels) {\n            chart.data.labels = labelsCopy;\n          }\n\n          chart.update();\n        });\n      }\n    };\n  };\n\n  return Chartist.plugins.legend;\n});","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/node_modules/chartist-plugin-legend/chartist-plugin-legend.js"],"names":["root","factory","define","amd","chartist","returnExportsGlobal","exports","module","require","Chartist","defaultOptions","className","classNames","removeAll","legendNames","clickable","onClick","position","plugins","legend","options","compareNumbers","a","b","HTMLElement","Error","cachedDOMPosition","extend","chart","existingLegendElement","container","querySelector","parentNode","removeChild","newSeries","data","series","map","seriesIndex","value","alphaNumerate","legendElement","document","createElement","isPieChart","Pie","classList","add","length","width","style","cssText","removedSeries","originalSeries","slice","useLabels","labels","originalLabels","classNamesViable","Array","isArray","forEach","i","li","setAttribute","textContent","name","appendChild","on","insertBefore","childNodes","addEventListener","e","target","hasAttribute","preventDefault","parseInt","getAttribute","removedSeriesIndex","indexOf","splice","remove","push","seriesItems","prototype","call","item","seriesCopy","labelsCopy","sort","reverse","update"],"mappings":"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","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chartist'], function (chartist) {\n            return (root.returnExportsGlobal = factory(chartist));\n        });\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chartist'));\n    } else {\n        root['Chartist.plugins.legend'] = factory(root.Chartist);\n    }\n}(this, function (Chartist) {\n    /**\n     * This Chartist plugin creates a legend to show next to the chart.\n     *\n     */\n    'use strict';\n\n    var defaultOptions = {\n        className: '',\n        classNames: false,\n        removeAll: false,\n        legendNames: false,\n        clickable: true,\n        onClick: null,\n        position: 'top'\n    };\n\n    Chartist.plugins = Chartist.plugins || {};\n\n    Chartist.plugins.legend = function (options) {\n\n        function compareNumbers(a, b) {\n            return a - b;\n        }\n\n        // Catch invalid options\n        if (options && options.position) {\n           if (!(options.position === 'top' || options.position === 'bottom' || options.position instanceof HTMLElement)) {\n              throw Error('The position you entered is not a valid position');\n           }\n           if(options.position instanceof HTMLElement){\n              // Detatch DOM element from options object, because Chartist.extend currently chokes on circular references present in HTMLElements\n              var cachedDOMPosition = options.position;\n              delete options.position;\n           }\n        }\n\n        options = Chartist.extend({}, defaultOptions, options);\n\n        if(cachedDOMPosition){\n            // Reattatch the DOM Element position if it was removed before\n            options.position = cachedDOMPosition\n        }\n\n        return function legend(chart) {\n            var existingLegendElement = chart.container.querySelector('.ct-legend');\n            if (existingLegendElement) {\n                // Clear legend if already existing.\n                existingLegendElement.parentNode.removeChild(existingLegendElement);\n            }\n\n            // Set a unique className for each series so that when a series is removed,\n            // the other series still have the same color.\n            if (options.clickable) {\n                var newSeries = chart.data.series.map(function (series, seriesIndex) {\n                    if (typeof series !== 'object') {\n                        series = {\n                            value: series\n                        };\n                    }\n\n                    series.className = series.className || chart.options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex);\n                    return series;\n                });\n                chart.data.series = newSeries;\n            }\n\n            var legendElement = document.createElement('ul'),\n                isPieChart = chart instanceof Chartist.Pie;\n            legendElement.className = 'ct-legend';\n            if (chart instanceof Chartist.Pie) {\n                legendElement.classList.add('ct-legend-inside');\n            }\n            if (typeof options.className === 'string' && options.className.length > 0) {\n                legendElement.classList.add(options.className);\n            }\n\n            if (chart.options.width) {\n                legendElement.style.cssText = 'width: ' + chart.options.width + 'px;margin: 0 auto;';\n            }\n\n            var removedSeries = [],\n                originalSeries = chart.data.series.slice(0);\n\n            // Get the right array to use for generating the legend.\n            var legendNames = chart.data.series,\n                useLabels = isPieChart && chart.data.labels && chart.data.labels.length;\n            if (useLabels) {\n                var originalLabels = chart.data.labels.slice(0);\n                legendNames = chart.data.labels;\n            }\n            legendNames = options.legendNames || legendNames;\n\n            // Check if given class names are viable to append to legends\n            var classNamesViable = (Array.isArray(options.classNames) && (options.classNames.length === legendNames.length));\n\n            // Loop through all legends to set each name in a list item.\n            legendNames.forEach(function (legend, i) {\n               var li = document.createElement('li');\n               li.className = 'ct-series-' + i;\n               // Append specific class to a legend element, if viable classes are given\n               if (classNamesViable) {\n                  li.className += ' ' + options.classNames[i];\n               }\n               li.setAttribute('data-legend', i);\n               li.textContent = legend.name || legend;\n               legendElement.appendChild(li);\n            });\n\n            chart.on('created', function (data) {\n               // Append the legend element to the DOM\n               if(!(options.position instanceof HTMLElement))\n               {\n                  switch (options.position) {\n                     case 'top':\n                        chart.container.insertBefore(legendElement, chart.container.childNodes[0]);\n                        break;\n\n                     case 'bottom':\n                        chart.container.insertBefore(legendElement, null);\n                        break;\n                   }\n               }\n               else {\n                  // Appends the legend element as the last child of a given HTMLElement\n                  options.position.insertBefore(legendElement, null);\n               }\n            });\n\n            if (options.clickable) {\n                legendElement.addEventListener('click', function (e) {\n                    var li = e.target;\n                    if (li.parentNode !== legendElement || !li.hasAttribute('data-legend'))\n                        return;\n                    e.preventDefault();\n\n                    var seriesIndex = parseInt(li.getAttribute('data-legend')),\n                        removedSeriesIndex = removedSeries.indexOf(seriesIndex);\n\n                    if (removedSeriesIndex > -1) {\n                        // Add to series again.\n                        removedSeries.splice(removedSeriesIndex, 1);\n                        li.classList.remove('inactive');\n                    } else {\n                        if (!options.removeAll) {\n                             // Remove from series, only if a minimum of one series is still visible.\n                          if ( chart.data.series.length > 1) {\n                             removedSeries.push(seriesIndex);\n                             li.classList.add('inactive');\n                          }\n                             // Set all series as active.\n                          else {\n                             removedSeries = [];\n                             var seriesItems = Array.prototype.slice.call(legendElement.childNodes);\n                             seriesItems.forEach(function (item) {\n                                item.classList.remove('inactive');\n                             });\n                          }\n                       }\n                       else {\n                          // Remove series unaffected if it is the last or not\n                          removedSeries.push(seriesIndex);\n                          li.classList.add('inactive');\n                       }\n                    }\n\n                    // Reset the series to original and remove each series that\n                    // is still removed again, to remain index order.\n                    var seriesCopy = originalSeries.slice(0);\n                    if (useLabels) {\n                        var labelsCopy = originalLabels.slice(0);\n                    }\n\n                    // Reverse sort the removedSeries to prevent removing the wrong index.\n                    removedSeries.sort(compareNumbers).reverse();\n\n                    removedSeries.forEach(function (series) {\n                        seriesCopy.splice(series, 1);\n                        if (useLabels) {\n                            labelsCopy.splice(series, 1);\n                        }\n                    });\n\n                    if (options.onClick) {\n                        options.onClick(chart, e);\n                    }\n\n                    chart.data.series = seriesCopy;\n                    if (useLabels) {\n                        chart.data.labels = labelsCopy;\n                    }\n\n                    chart.update();\n                });\n            }\n\n        };\n\n    };\n\n    return Chartist.plugins.legend;\n\n}));\n"]},"metadata":{},"sourceType":"script"}