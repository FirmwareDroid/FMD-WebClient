{"ast":null,"code":"import _isEqual from 'lodash/isEqual';\nimport _max from 'lodash/max';\nimport _min from 'lodash/min';\n/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport compose from 'recompose/compose';\nimport defaultProps from 'recompose/defaultProps';\nimport withPropsOnChange from 'recompose/withPropsOnChange';\nimport withState from 'recompose/withState';\nimport pure from 'recompose/pure';\nimport { scaleOrdinal, scaleLinear } from 'd3-scale';\nimport { withTheme, withDimensions, withMotion } from '../../../hocs';\nimport { getInheritedColorGenerator, guessQuantizeColorScale } from '../../../lib/colors';\nimport { getAccessorFor } from '../../../lib/propertiesConverters';\nimport { HeatMapDefaultProps } from './props';\n\nvar computeX = function computeX(column, cellWidth, padding) {\n  return column * cellWidth + cellWidth * 0.5 + padding * column + padding;\n};\n\nvar computeY = function computeY(row, cellHeight, padding) {\n  return row * cellHeight + cellHeight * 0.5 + padding * row + padding;\n};\n\nexport default (function (Component) {\n  return compose(defaultProps(HeatMapDefaultProps), withState('currentNode', 'setCurrentNode', null), withTheme(), withDimensions(), withMotion(), withPropsOnChange(['colors'], function (_ref) {\n    var colors = _ref.colors;\n    return {\n      colorScale: guessQuantizeColorScale(colors)\n    };\n  }), withPropsOnChange(['indexBy'], function (_ref2) {\n    var indexBy = _ref2.indexBy;\n    return {\n      getIndex: getAccessorFor(indexBy)\n    };\n  }), withPropsOnChange(['data', 'keys', 'width', 'height', 'padding', 'forceSquare'], function (_ref3) {\n    var data = _ref3.data,\n        keys = _ref3.keys,\n        width = _ref3.width,\n        height = _ref3.height,\n        padding = _ref3.padding,\n        forceSquare = _ref3.forceSquare;\n    var columns = keys.length;\n    var rows = data.length;\n    var cellWidth = Math.max((width - padding * (columns + 1)) / columns, 0);\n    var cellHeight = Math.max((height - padding * (rows + 1)) / rows, 0);\n    var offsetX = 0;\n    var offsetY = 0;\n\n    if (forceSquare === true) {\n      var cellSize = Math.min(cellWidth, cellHeight);\n      cellWidth = cellSize;\n      cellHeight = cellSize;\n      offsetX = (width - ((cellWidth + padding) * columns + padding)) / 2;\n      offsetY = (height - ((cellHeight + padding) * rows + padding)) / 2;\n    }\n\n    return {\n      cellWidth: cellWidth,\n      cellHeight: cellHeight,\n      offsetX: offsetX,\n      offsetY: offsetY\n    };\n  }), withPropsOnChange(['data', 'getIndex'], function (_ref4) {\n    var data = _ref4.data,\n        getIndex = _ref4.getIndex;\n    return {\n      indices: data.map(getIndex)\n    };\n  }), withPropsOnChange(function (prev, next) {\n    return prev.keys !== next.keys || prev.cellWidth !== next.cellWidth || prev.cellHeight !== next.cellHeight || prev.padding !== next.padding || !_isEqual(prev.indices, next.indices);\n  }, function (_ref5) {\n    var indices = _ref5.indices,\n        keys = _ref5.keys,\n        cellWidth = _ref5.cellWidth,\n        cellHeight = _ref5.cellHeight,\n        padding = _ref5.padding;\n    return {\n      xScale: scaleOrdinal(keys.map(function (key, i) {\n        return computeX(i, cellWidth, padding);\n      })).domain(keys),\n      yScale: scaleOrdinal(indices.map(function (d, i) {\n        return computeY(i, cellHeight, padding);\n      })).domain(indices)\n    };\n  }), withPropsOnChange(['data', 'keys', 'minValue', 'maxValue'], function (_ref6) {\n    var data = _ref6.data,\n        keys = _ref6.keys,\n        _minValue = _ref6.minValue,\n        _maxValue = _ref6.maxValue;\n    var minValue = _minValue;\n    var maxValue = _maxValue;\n\n    if (minValue === 'auto' || maxValue === 'auto') {\n      var allValues = data.reduce(function (acc, row) {\n        return acc.concat(keys.map(function (key) {\n          return row[key];\n        }));\n      }, []);\n      if (minValue === 'auto') minValue = _min(allValues);\n      if (maxValue === 'auto') maxValue = _max(allValues);\n    }\n\n    return {\n      minValue: Math.min(minValue, maxValue),\n      maxValue: Math.max(maxValue, minValue)\n    };\n  }), withPropsOnChange(['colorScale', 'minValue', 'maxValue'], function (_ref7) {\n    var colorScale = _ref7.colorScale,\n        minValue = _ref7.minValue,\n        maxValue = _ref7.maxValue;\n    return {\n      colorScale: colorScale.domain([minValue, maxValue])\n    };\n  }), withPropsOnChange(['sizeVariation', 'minValue', 'maxValue'], function (_ref8) {\n    var sizeVariation = _ref8.sizeVariation,\n        minValue = _ref8.minValue,\n        maxValue = _ref8.maxValue;\n    var sizeScale = void 0;\n\n    if (sizeVariation > 0) {\n      sizeScale = scaleLinear().range([1 - sizeVariation, 1]).domain([minValue, maxValue]);\n    }\n\n    return {\n      sizeScale: sizeScale\n    };\n  }), withPropsOnChange(['cellBorderColor'], function (_ref9) {\n    var cellBorderColor = _ref9.cellBorderColor;\n    return {\n      getCellBorderColor: getInheritedColorGenerator(cellBorderColor)\n    };\n  }), withPropsOnChange(['labelTextColor'], function (_ref10) {\n    var labelTextColor = _ref10.labelTextColor;\n    return {\n      getLabelTextColor: getInheritedColorGenerator(labelTextColor)\n    };\n  }), pure)(Component);\n});","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/node_modules/nivo/es/components/charts/heatmap/enhance.js"],"names":["_isEqual","_max","_min","compose","defaultProps","withPropsOnChange","withState","pure","scaleOrdinal","scaleLinear","withTheme","withDimensions","withMotion","getInheritedColorGenerator","guessQuantizeColorScale","getAccessorFor","HeatMapDefaultProps","computeX","column","cellWidth","padding","computeY","row","cellHeight","Component","_ref","colors","colorScale","_ref2","indexBy","getIndex","_ref3","data","keys","width","height","forceSquare","columns","length","rows","Math","max","offsetX","offsetY","cellSize","min","_ref4","indices","map","prev","next","_ref5","xScale","key","i","domain","yScale","d","_ref6","_minValue","minValue","_maxValue","maxValue","allValues","reduce","acc","concat","_ref7","_ref8","sizeVariation","sizeScale","range","_ref9","cellBorderColor","getCellBorderColor","_ref10","labelTextColor","getLabelTextColor"],"mappings":"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","sourcesContent":["import _isEqual from 'lodash/isEqual';\nimport _max from 'lodash/max';\nimport _min from 'lodash/min'; /*\n                                * This file is part of the nivo project.\n                                *\n                                * Copyright 2016-present, RaphaÃ«l Benitte.\n                                *\n                                * For the full copyright and license information, please view the LICENSE\n                                * file that was distributed with this source code.\n                                */\n\nimport compose from 'recompose/compose';\nimport defaultProps from 'recompose/defaultProps';\nimport withPropsOnChange from 'recompose/withPropsOnChange';\nimport withState from 'recompose/withState';\nimport pure from 'recompose/pure';\nimport { scaleOrdinal, scaleLinear } from 'd3-scale';\nimport { withTheme, withDimensions, withMotion } from '../../../hocs';\nimport { getInheritedColorGenerator, guessQuantizeColorScale } from '../../../lib/colors';\nimport { getAccessorFor } from '../../../lib/propertiesConverters';\nimport { HeatMapDefaultProps } from './props';\n\nvar computeX = function computeX(column, cellWidth, padding) {\n    return column * cellWidth + cellWidth * 0.5 + padding * column + padding;\n};\nvar computeY = function computeY(row, cellHeight, padding) {\n    return row * cellHeight + cellHeight * 0.5 + padding * row + padding;\n};\n\nexport default (function (Component) {\n    return compose(defaultProps(HeatMapDefaultProps), withState('currentNode', 'setCurrentNode', null), withTheme(), withDimensions(), withMotion(), withPropsOnChange(['colors'], function (_ref) {\n        var colors = _ref.colors;\n        return {\n            colorScale: guessQuantizeColorScale(colors)\n        };\n    }), withPropsOnChange(['indexBy'], function (_ref2) {\n        var indexBy = _ref2.indexBy;\n        return {\n            getIndex: getAccessorFor(indexBy)\n        };\n    }), withPropsOnChange(['data', 'keys', 'width', 'height', 'padding', 'forceSquare'], function (_ref3) {\n        var data = _ref3.data,\n            keys = _ref3.keys,\n            width = _ref3.width,\n            height = _ref3.height,\n            padding = _ref3.padding,\n            forceSquare = _ref3.forceSquare;\n\n        var columns = keys.length;\n        var rows = data.length;\n\n        var cellWidth = Math.max((width - padding * (columns + 1)) / columns, 0);\n        var cellHeight = Math.max((height - padding * (rows + 1)) / rows, 0);\n\n        var offsetX = 0;\n        var offsetY = 0;\n        if (forceSquare === true) {\n            var cellSize = Math.min(cellWidth, cellHeight);\n            cellWidth = cellSize;\n            cellHeight = cellSize;\n\n            offsetX = (width - ((cellWidth + padding) * columns + padding)) / 2;\n            offsetY = (height - ((cellHeight + padding) * rows + padding)) / 2;\n        }\n\n        return {\n            cellWidth: cellWidth,\n            cellHeight: cellHeight,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n    }), withPropsOnChange(['data', 'getIndex'], function (_ref4) {\n        var data = _ref4.data,\n            getIndex = _ref4.getIndex;\n        return {\n            indices: data.map(getIndex)\n        };\n    }), withPropsOnChange(function (prev, next) {\n        return prev.keys !== next.keys || prev.cellWidth !== next.cellWidth || prev.cellHeight !== next.cellHeight || prev.padding !== next.padding || !_isEqual(prev.indices, next.indices);\n    }, function (_ref5) {\n        var indices = _ref5.indices,\n            keys = _ref5.keys,\n            cellWidth = _ref5.cellWidth,\n            cellHeight = _ref5.cellHeight,\n            padding = _ref5.padding;\n        return {\n            xScale: scaleOrdinal(keys.map(function (key, i) {\n                return computeX(i, cellWidth, padding);\n            })).domain(keys),\n            yScale: scaleOrdinal(indices.map(function (d, i) {\n                return computeY(i, cellHeight, padding);\n            })).domain(indices)\n        };\n    }), withPropsOnChange(['data', 'keys', 'minValue', 'maxValue'], function (_ref6) {\n        var data = _ref6.data,\n            keys = _ref6.keys,\n            _minValue = _ref6.minValue,\n            _maxValue = _ref6.maxValue;\n\n        var minValue = _minValue;\n        var maxValue = _maxValue;\n        if (minValue === 'auto' || maxValue === 'auto') {\n            var allValues = data.reduce(function (acc, row) {\n                return acc.concat(keys.map(function (key) {\n                    return row[key];\n                }));\n            }, []);\n\n            if (minValue === 'auto') minValue = _min(allValues);\n            if (maxValue === 'auto') maxValue = _max(allValues);\n        }\n\n        return {\n            minValue: Math.min(minValue, maxValue),\n            maxValue: Math.max(maxValue, minValue)\n        };\n    }), withPropsOnChange(['colorScale', 'minValue', 'maxValue'], function (_ref7) {\n        var colorScale = _ref7.colorScale,\n            minValue = _ref7.minValue,\n            maxValue = _ref7.maxValue;\n        return {\n            colorScale: colorScale.domain([minValue, maxValue])\n        };\n    }), withPropsOnChange(['sizeVariation', 'minValue', 'maxValue'], function (_ref8) {\n        var sizeVariation = _ref8.sizeVariation,\n            minValue = _ref8.minValue,\n            maxValue = _ref8.maxValue;\n\n        var sizeScale = void 0;\n        if (sizeVariation > 0) {\n            sizeScale = scaleLinear().range([1 - sizeVariation, 1]).domain([minValue, maxValue]);\n        }\n\n        return { sizeScale: sizeScale };\n    }), withPropsOnChange(['cellBorderColor'], function (_ref9) {\n        var cellBorderColor = _ref9.cellBorderColor;\n        return {\n            getCellBorderColor: getInheritedColorGenerator(cellBorderColor)\n        };\n    }), withPropsOnChange(['labelTextColor'], function (_ref10) {\n        var labelTextColor = _ref10.labelTextColor;\n        return {\n            getLabelTextColor: getInheritedColorGenerator(labelTextColor)\n        };\n    }), pure)(Component);\n});"]},"metadata":{},"sourceType":"module"}