{"ast":null,"code":"import _assign from 'lodash/assign';\nimport _max from 'lodash/max';\nimport _range from 'lodash/range';\nimport _isDate from 'lodash/isDate';\nimport _memoize from 'lodash/memoize';\n/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { DIRECTION_HORIZONTAL } from '../../../constants/directions';\nimport { timeFormat } from 'd3-time-format';\nimport { timeDays, timeWeek, timeWeeks, timeMonths, timeYear } from 'd3-time';\n/**\n * Compute day cell size according to current context.\n *\n * @param {number} width\n * @param {number} height\n * @param {number} direction\n * @param {array}  yearRange\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @param {number} maxWeeks\n * @returns {number}\n */\n\nvar computeCellSize = function computeCellSize(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      direction = _ref.direction,\n      yearRange = _ref.yearRange,\n      yearSpacing = _ref.yearSpacing,\n      daySpacing = _ref.daySpacing,\n      maxWeeks = _ref.maxWeeks;\n  var hCellSize = void 0;\n  var vCellSize = void 0;\n\n  if (direction === DIRECTION_HORIZONTAL) {\n    hCellSize = (width - daySpacing * maxWeeks) / maxWeeks;\n    vCellSize = (height - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) / (yearRange.length * 7);\n  } else {\n    hCellSize = (width - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) / (yearRange.length * 7);\n    vCellSize = (height - daySpacing * maxWeeks) / maxWeeks;\n  }\n\n  return Math.min(hCellSize, vCellSize);\n};\n/**\n * Computes month path and bounding box.\n *\n * @param {Date}   date\n * @param {number} cellSize\n * @param {number} yearIndex\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @param {string} direction\n * @returns { { path: string, bbox: { x: number, y: number, width: number, height: number } } }\n */\n\n\nvar monthPathAndBBox = function monthPathAndBBox(_ref2) {\n  var date = _ref2.date,\n      cellSize = _ref2.cellSize,\n      yearIndex = _ref2.yearIndex,\n      yearSpacing = _ref2.yearSpacing,\n      daySpacing = _ref2.daySpacing,\n      direction = _ref2.direction;\n  var t1 = new Date(date.getFullYear(), date.getMonth() + 1, 0); // first day of next month\n\n  var d0 = date.getDay(); // first day of month\n\n  var w0 = timeWeek.count(timeYear(date), date); // first week of month\n\n  var d1 = t1.getDay(); // last day of month\n\n  var w1 = timeWeek.count(timeYear(t1), t1); // last week of month\n  // offset according to year index\n\n  var xO = 0;\n  var yO = 0;\n  var yearOffset = yearIndex * (7 * (cellSize + daySpacing) + yearSpacing);\n\n  if (direction === DIRECTION_HORIZONTAL) {\n    yO = yearOffset;\n  } else {\n    xO = yearOffset;\n  }\n\n  var path = void 0;\n  var bbox = {\n    x: xO,\n    y: yO,\n    width: 0,\n    height: 0\n  };\n\n  if (direction === DIRECTION_HORIZONTAL) {\n    path = ['M' + (xO + (w0 + 1) * (cellSize + daySpacing)) + ',' + (yO + d0 * (cellSize + daySpacing)), 'H' + (xO + w0 * (cellSize + daySpacing)) + 'V' + (yO + 7 * (cellSize + daySpacing)), 'H' + (xO + w1 * (cellSize + daySpacing)) + 'V' + (yO + (d1 + 1) * (cellSize + daySpacing)), 'H' + (xO + (w1 + 1) * (cellSize + daySpacing)) + 'V' + yO, 'H' + (xO + (w0 + 1) * (cellSize + daySpacing)) + 'Z'].join('');\n    bbox.x = xO + w0 * (cellSize + daySpacing);\n    bbox.width = (w1 + 1) * (cellSize + daySpacing) - bbox.x;\n    bbox.height = 7 * (cellSize + daySpacing);\n  } else {\n    path = ['M' + (xO + d0 * (cellSize + daySpacing)) + ',' + (yO + (w0 + 1) * (cellSize + daySpacing)), 'H' + xO + 'V' + (yO + (w1 + 1) * (cellSize + daySpacing)), 'H' + (xO + (d1 + 1) * (cellSize + daySpacing)) + 'V' + (yO + w1 * (cellSize + daySpacing)), 'H' + (xO + 7 * (cellSize + daySpacing)) + 'V' + (yO + w0 * (cellSize + daySpacing)), 'H' + (xO + d0 * (cellSize + daySpacing)) + 'Z'].join('');\n    bbox.y = yO + w0 * (cellSize + daySpacing);\n    bbox.width = 7 * (cellSize + daySpacing);\n    bbox.height = (w1 + 1) * (cellSize + daySpacing) - bbox.y;\n  }\n\n  return {\n    path: path,\n    bbox: bbox\n  };\n};\n/**\n * Creates a memoized version of monthPathAndBBox function.\n */\n\n\nvar memoMonthPathAndBBox = _memoize(monthPathAndBBox, function (_ref3) {\n  var date = _ref3.date,\n      cellSize = _ref3.cellSize,\n      yearIndex = _ref3.yearIndex,\n      yearSpacing = _ref3.yearSpacing,\n      daySpacing = _ref3.daySpacing,\n      direction = _ref3.direction;\n  return date.toString() + '.' + cellSize + '.' + yearIndex + '.' + yearSpacing + '.' + daySpacing + '.' + direction;\n});\n/**\n * Returns a function to Compute day cell position for horizontal layout.\n *\n * @param {number} cellSize\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @returns { function(): { x: number, y: number } }\n */\n\n\nvar cellPositionHorizontal = function cellPositionHorizontal(cellSize, yearSpacing, daySpacing) {\n  return function (d, yearIndex) {\n    var weekOfYear = timeWeek.count(timeYear(d), d);\n    return {\n      x: weekOfYear * (cellSize + daySpacing) + daySpacing / 2,\n      y: d.getDay() * (cellSize + daySpacing) + daySpacing / 2 + yearIndex * (yearSpacing + 7 * (cellSize + daySpacing))\n    };\n  };\n};\n/**\n * Returns a function to Compute day cell position for vertical layout.\n *\n * @param {number} cellSize\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @returns { function(): { x: number, y: number } }\n */\n\n\nvar cellPositionVertical = function cellPositionVertical(cellSize, yearSpacing, daySpacing) {\n  return function (d, yearIndex) {\n    var weekOfYear = timeWeek.count(timeYear(d), d);\n    return {\n      x: d.getDay() * (cellSize + daySpacing) + daySpacing / 2 + yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n      y: weekOfYear * (cellSize + daySpacing) + daySpacing / 2\n    };\n  };\n}; // used for days range and data matching\n\n\nvar dayFormat = timeFormat('%Y-%m-%d');\n/**\n * This layout is responsible for computing Calendar chart data/positions….\n * It's used for all Calendar related chart components.\n *\n * @param {number}      width\n * @param {number}      height\n * @param {string|Date} from\n * @param {string|Date} to\n * @param {array}       data\n * @param {string}      direction\n * @param {object}      colorScale\n * @param {string}      emptyColor\n * @param {number}      yearSpacing\n * @param {number}      daySpacing\n * @returns {object}\n */\n\nvar CalendarLayout = function CalendarLayout(_ref4) {\n  var width = _ref4.width,\n      height = _ref4.height,\n      from = _ref4.from,\n      to = _ref4.to,\n      data = _ref4.data,\n      direction = _ref4.direction,\n      colorScale = _ref4.colorScale,\n      emptyColor = _ref4.emptyColor,\n      yearSpacing = _ref4.yearSpacing,\n      daySpacing = _ref4.daySpacing; // time related data\n\n  var fromDate = _isDate(from) ? from : new Date(from);\n  var toDate = _isDate(to) ? to : new Date(to);\n\n  var yearRange = _range(fromDate.getFullYear(), toDate.getFullYear() + 1);\n\n  var maxWeeks = _max(yearRange.map(function (year) {\n    return timeWeeks(new Date(year, 0, 1), new Date(year + 1, 0, 1)).length;\n  })) + 1; // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n  // Computes years/months/days\n  // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n  // compute cellSize\n\n  var cellSize = computeCellSize({\n    width: width,\n    height: height,\n    direction: direction,\n    yearRange: yearRange,\n    yearSpacing: yearSpacing,\n    daySpacing: daySpacing,\n    maxWeeks: maxWeeks\n  }); // determine day cells positioning function according to layout direction\n\n  var cellPosition = void 0;\n\n  if (direction === DIRECTION_HORIZONTAL) {\n    cellPosition = cellPositionHorizontal(cellSize, yearSpacing, daySpacing);\n  } else {\n    cellPosition = cellPositionVertical(cellSize, yearSpacing, daySpacing);\n  }\n\n  var years = [];\n  var months = [];\n  var days = [];\n  yearRange.forEach(function (year, i) {\n    var yearStart = new Date(year, 0, 1);\n    var yearEnd = new Date(year + 1, 0, 1);\n    days = days.concat(timeDays(yearStart, yearEnd).map(function (dayDate) {\n      return _assign({\n        date: dayDate,\n        day: dayFormat(dayDate),\n        size: cellSize\n      }, cellPosition(dayDate, i));\n    }));\n    var yearMonths = timeMonths(yearStart, yearEnd).map(function (monthDate) {\n      return _assign({\n        date: monthDate\n      }, memoMonthPathAndBBox({\n        date: monthDate,\n        direction: direction,\n        yearIndex: i,\n        yearSpacing: yearSpacing,\n        daySpacing: daySpacing,\n        cellSize: cellSize\n      }));\n    });\n    months = months.concat(yearMonths);\n    years.push({\n      year: year,\n      bbox: {\n        x: yearMonths[0].bbox.x,\n        y: yearMonths[0].bbox.y,\n        width: yearMonths[11].bbox.x - yearMonths[0].bbox.x + yearMonths[11].bbox.width,\n        height: yearMonths[11].bbox.y - yearMonths[0].bbox.y + yearMonths[11].bbox.height\n      }\n    });\n  }); // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n  // Computes days/data intersection\n  // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n  //const color = scalePropToD3Scale(colorScale)\n\n  days.forEach(function (day) {\n    day.color = emptyColor;\n    data.forEach(function (dataDay) {\n      if (dataDay.day === day.day) {\n        day.value = dataDay.value;\n        day.color = colorScale(dataDay.value);\n      }\n    });\n  });\n  return {\n    years: years,\n    months: months,\n    days: days,\n    cellSize: cellSize\n  };\n};\n\nexport default CalendarLayout;","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/node_modules/nivo/es/lib/charts/calendar/CalendarLayout.js"],"names":["_assign","_max","_range","_isDate","_memoize","DIRECTION_HORIZONTAL","timeFormat","timeDays","timeWeek","timeWeeks","timeMonths","timeYear","computeCellSize","_ref","width","height","direction","yearRange","yearSpacing","daySpacing","maxWeeks","hCellSize","vCellSize","length","Math","min","monthPathAndBBox","_ref2","date","cellSize","yearIndex","t1","Date","getFullYear","getMonth","d0","getDay","w0","count","d1","w1","xO","yO","yearOffset","path","bbox","x","y","join","memoMonthPathAndBBox","_ref3","toString","cellPositionHorizontal","d","weekOfYear","cellPositionVertical","dayFormat","CalendarLayout","_ref4","from","to","data","colorScale","emptyColor","fromDate","toDate","map","year","cellPosition","years","months","days","forEach","i","yearStart","yearEnd","concat","dayDate","day","size","yearMonths","monthDate","push","color","dataDay","value"],"mappings":"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","sourcesContent":["import _assign from 'lodash/assign';\nimport _max from 'lodash/max';\nimport _range from 'lodash/range';\nimport _isDate from 'lodash/isDate';\nimport _memoize from 'lodash/memoize'; /*\n                                        * This file is part of the nivo project.\n                                        *\n                                        * Copyright 2016-present, Raphaël Benitte.\n                                        *\n                                        * For the full copyright and license information, please view the LICENSE\n                                        * file that was distributed with this source code.\n                                        */\n\nimport { DIRECTION_HORIZONTAL } from '../../../constants/directions';\nimport { timeFormat } from 'd3-time-format';\nimport { timeDays, timeWeek, timeWeeks, timeMonths, timeYear } from 'd3-time';\n\n/**\n * Compute day cell size according to current context.\n *\n * @param {number} width\n * @param {number} height\n * @param {number} direction\n * @param {array}  yearRange\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @param {number} maxWeeks\n * @returns {number}\n */\nvar computeCellSize = function computeCellSize(_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        direction = _ref.direction,\n        yearRange = _ref.yearRange,\n        yearSpacing = _ref.yearSpacing,\n        daySpacing = _ref.daySpacing,\n        maxWeeks = _ref.maxWeeks;\n\n    var hCellSize = void 0;\n    var vCellSize = void 0;\n\n    if (direction === DIRECTION_HORIZONTAL) {\n        hCellSize = (width - daySpacing * maxWeeks) / maxWeeks;\n        vCellSize = (height - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) / (yearRange.length * 7);\n    } else {\n        hCellSize = (width - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) / (yearRange.length * 7);\n        vCellSize = (height - daySpacing * maxWeeks) / maxWeeks;\n    }\n\n    return Math.min(hCellSize, vCellSize);\n};\n\n/**\n * Computes month path and bounding box.\n *\n * @param {Date}   date\n * @param {number} cellSize\n * @param {number} yearIndex\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @param {string} direction\n * @returns { { path: string, bbox: { x: number, y: number, width: number, height: number } } }\n */\nvar monthPathAndBBox = function monthPathAndBBox(_ref2) {\n    var date = _ref2.date,\n        cellSize = _ref2.cellSize,\n        yearIndex = _ref2.yearIndex,\n        yearSpacing = _ref2.yearSpacing,\n        daySpacing = _ref2.daySpacing,\n        direction = _ref2.direction;\n\n    var t1 = new Date(date.getFullYear(), date.getMonth() + 1, 0); // first day of next month\n    var d0 = date.getDay(); // first day of month\n    var w0 = timeWeek.count(timeYear(date), date); // first week of month\n    var d1 = t1.getDay(); // last day of month\n    var w1 = timeWeek.count(timeYear(t1), t1); // last week of month\n\n    // offset according to year index\n    var xO = 0;\n    var yO = 0;\n    var yearOffset = yearIndex * (7 * (cellSize + daySpacing) + yearSpacing);\n    if (direction === DIRECTION_HORIZONTAL) {\n        yO = yearOffset;\n    } else {\n        xO = yearOffset;\n    }\n\n    var path = void 0;\n    var bbox = { x: xO, y: yO, width: 0, height: 0 };\n    if (direction === DIRECTION_HORIZONTAL) {\n        path = ['M' + (xO + (w0 + 1) * (cellSize + daySpacing)) + ',' + (yO + d0 * (cellSize + daySpacing)), 'H' + (xO + w0 * (cellSize + daySpacing)) + 'V' + (yO + 7 * (cellSize + daySpacing)), 'H' + (xO + w1 * (cellSize + daySpacing)) + 'V' + (yO + (d1 + 1) * (cellSize + daySpacing)), 'H' + (xO + (w1 + 1) * (cellSize + daySpacing)) + 'V' + yO, 'H' + (xO + (w0 + 1) * (cellSize + daySpacing)) + 'Z'].join('');\n\n        bbox.x = xO + w0 * (cellSize + daySpacing);\n        bbox.width = (w1 + 1) * (cellSize + daySpacing) - bbox.x;\n        bbox.height = 7 * (cellSize + daySpacing);\n    } else {\n        path = ['M' + (xO + d0 * (cellSize + daySpacing)) + ',' + (yO + (w0 + 1) * (cellSize + daySpacing)), 'H' + xO + 'V' + (yO + (w1 + 1) * (cellSize + daySpacing)), 'H' + (xO + (d1 + 1) * (cellSize + daySpacing)) + 'V' + (yO + w1 * (cellSize + daySpacing)), 'H' + (xO + 7 * (cellSize + daySpacing)) + 'V' + (yO + w0 * (cellSize + daySpacing)), 'H' + (xO + d0 * (cellSize + daySpacing)) + 'Z'].join('');\n\n        bbox.y = yO + w0 * (cellSize + daySpacing);\n        bbox.width = 7 * (cellSize + daySpacing);\n        bbox.height = (w1 + 1) * (cellSize + daySpacing) - bbox.y;\n    }\n\n    return { path: path, bbox: bbox };\n};\n\n/**\n * Creates a memoized version of monthPathAndBBox function.\n */\nvar memoMonthPathAndBBox = _memoize(monthPathAndBBox, function (_ref3) {\n    var date = _ref3.date,\n        cellSize = _ref3.cellSize,\n        yearIndex = _ref3.yearIndex,\n        yearSpacing = _ref3.yearSpacing,\n        daySpacing = _ref3.daySpacing,\n        direction = _ref3.direction;\n\n    return date.toString() + '.' + cellSize + '.' + yearIndex + '.' + yearSpacing + '.' + daySpacing + '.' + direction;\n});\n\n/**\n * Returns a function to Compute day cell position for horizontal layout.\n *\n * @param {number} cellSize\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @returns { function(): { x: number, y: number } }\n */\nvar cellPositionHorizontal = function cellPositionHorizontal(cellSize, yearSpacing, daySpacing) {\n    return function (d, yearIndex) {\n        var weekOfYear = timeWeek.count(timeYear(d), d);\n\n        return {\n            x: weekOfYear * (cellSize + daySpacing) + daySpacing / 2,\n            y: d.getDay() * (cellSize + daySpacing) + daySpacing / 2 + yearIndex * (yearSpacing + 7 * (cellSize + daySpacing))\n        };\n    };\n};\n\n/**\n * Returns a function to Compute day cell position for vertical layout.\n *\n * @param {number} cellSize\n * @param {number} yearSpacing\n * @param {number} daySpacing\n * @returns { function(): { x: number, y: number } }\n */\nvar cellPositionVertical = function cellPositionVertical(cellSize, yearSpacing, daySpacing) {\n    return function (d, yearIndex) {\n        var weekOfYear = timeWeek.count(timeYear(d), d);\n\n        return {\n            x: d.getDay() * (cellSize + daySpacing) + daySpacing / 2 + yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n            y: weekOfYear * (cellSize + daySpacing) + daySpacing / 2\n        };\n    };\n};\n\n// used for days range and data matching\nvar dayFormat = timeFormat('%Y-%m-%d');\n\n/**\n * This layout is responsible for computing Calendar chart data/positions….\n * It's used for all Calendar related chart components.\n *\n * @param {number}      width\n * @param {number}      height\n * @param {string|Date} from\n * @param {string|Date} to\n * @param {array}       data\n * @param {string}      direction\n * @param {object}      colorScale\n * @param {string}      emptyColor\n * @param {number}      yearSpacing\n * @param {number}      daySpacing\n * @returns {object}\n */\nvar CalendarLayout = function CalendarLayout(_ref4) {\n    var width = _ref4.width,\n        height = _ref4.height,\n        from = _ref4.from,\n        to = _ref4.to,\n        data = _ref4.data,\n        direction = _ref4.direction,\n        colorScale = _ref4.colorScale,\n        emptyColor = _ref4.emptyColor,\n        yearSpacing = _ref4.yearSpacing,\n        daySpacing = _ref4.daySpacing;\n\n    // time related data\n    var fromDate = _isDate(from) ? from : new Date(from);\n    var toDate = _isDate(to) ? to : new Date(to);\n\n    var yearRange = _range(fromDate.getFullYear(), toDate.getFullYear() + 1);\n    var maxWeeks = _max(yearRange.map(function (year) {\n        return timeWeeks(new Date(year, 0, 1), new Date(year + 1, 0, 1)).length;\n    })) + 1;\n\n    // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n    // Computes years/months/days\n    // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n    // compute cellSize\n    var cellSize = computeCellSize({\n        width: width,\n        height: height,\n        direction: direction,\n        yearRange: yearRange,\n        yearSpacing: yearSpacing,\n        daySpacing: daySpacing,\n        maxWeeks: maxWeeks\n    });\n\n    // determine day cells positioning function according to layout direction\n    var cellPosition = void 0;\n    if (direction === DIRECTION_HORIZONTAL) {\n        cellPosition = cellPositionHorizontal(cellSize, yearSpacing, daySpacing);\n    } else {\n        cellPosition = cellPositionVertical(cellSize, yearSpacing, daySpacing);\n    }\n\n    var years = [];\n    var months = [];\n    var days = [];\n\n    yearRange.forEach(function (year, i) {\n        var yearStart = new Date(year, 0, 1);\n        var yearEnd = new Date(year + 1, 0, 1);\n\n        days = days.concat(timeDays(yearStart, yearEnd).map(function (dayDate) {\n            return _assign({\n                date: dayDate,\n                day: dayFormat(dayDate),\n                size: cellSize\n            }, cellPosition(dayDate, i));\n        }));\n\n        var yearMonths = timeMonths(yearStart, yearEnd).map(function (monthDate) {\n            return _assign({ date: monthDate }, memoMonthPathAndBBox({\n                date: monthDate,\n                direction: direction,\n                yearIndex: i,\n                yearSpacing: yearSpacing,\n                daySpacing: daySpacing,\n                cellSize: cellSize\n            }));\n        });\n\n        months = months.concat(yearMonths);\n\n        years.push({\n            year: year,\n            bbox: {\n                x: yearMonths[0].bbox.x,\n                y: yearMonths[0].bbox.y,\n                width: yearMonths[11].bbox.x - yearMonths[0].bbox.x + yearMonths[11].bbox.width,\n                height: yearMonths[11].bbox.y - yearMonths[0].bbox.y + yearMonths[11].bbox.height\n            }\n        });\n    });\n\n    // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n    // Computes days/data intersection\n    // ——————————————————————————————————————————————————————————————————————————————————————————————————————\n    //const color = scalePropToD3Scale(colorScale)\n\n    days.forEach(function (day) {\n        day.color = emptyColor;\n        data.forEach(function (dataDay) {\n            if (dataDay.day === day.day) {\n                day.value = dataDay.value;\n                day.color = colorScale(dataDay.value);\n            }\n        });\n    });\n\n    return { years: years, months: months, days: days, cellSize: cellSize };\n};\n\nexport default CalendarLayout;"]},"metadata":{},"sourceType":"module"}