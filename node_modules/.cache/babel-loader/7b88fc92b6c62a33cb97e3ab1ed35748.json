{"ast":null,"code":"var _jsxFileName=\"/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/src/components/Tables/Table.jsx\";import{Spinner}from\"react-bootstrap\";import BootstrapTable from'react-bootstrap-table-next';import ToolkitProvider,{Search}from'react-bootstrap-table2-toolkit';import filterFactory from'react-bootstrap-table2-filter';import paginationFactory from'react-bootstrap-table2-paginator';import React from'react';import ExportCSV from\"../CustomButton/ExportCSVButton\";const{SearchBar}=Search;const NoDataIndication=()=>/*#__PURE__*/React.createElement(\"div\",{__self:this,__source:{fileName:_jsxFileName,lineNumber:11,columnNumber:3}},/*#__PURE__*/React.createElement(\"p\",{__self:this,__source:{fileName:_jsxFileName,lineNumber:12,columnNumber:5}},\"Looks like there is no data...\"));/**\n * Add a column to the table\n * @param columns: the {Array} on which the data will be added.\n * @param dataField: str the identifier (name) of the datafield\n * @param text: str to be shown as header.\n */function add_column(columns,dataField,text){columns.push({dataField:dataField,text:text,sort:true,headerTitle:true});}/**\n * Creats the structure needed for showing a table for dict data.\n * @param data: object as dict(key, value)\n * @param columnTitles: header titles\n * @returns {Array}\n */function create_data_arrays(data,columnTitles){let table_data=[];let first_datafield=columnTitles[0];let second_datafield=columnTitles[1];for(let key in data){if(data.hasOwnProperty(key)){let row={};row[first_datafield]=key;row[second_datafield]=data[key];table_data.push(row);}}return table_data;}/**\n * Creates a basic table from the given data.\n * @param data: the data to show in the table.\n * @param columnTitles: the header title of the column\n * @returns {*}\n * @constructor\n */function Table({data,columnTitles}){if(!data||data===undefined||data.length===0)return/*#__PURE__*/React.createElement(Spinner,{animation:\"border\",variant:\"primary\",size:\"mg\",__self:this,__source:{fileName:_jsxFileName,lineNumber:62,columnNumber:63}});//console.log(\"tableData\", data);\nlet columns=[];let table_data=[];columnTitles.forEach(element=>add_column(columns,element,element));if(columnTitles.length===2){table_data=create_data_arrays(data,columnTitles);}return/*#__PURE__*/React.createElement(ToolkitProvider,{keyField:columnTitles[0],data:table_data,columns:columns,exportCSV:true,search:true,__self:this,__source:{fileName:_jsxFileName,lineNumber:71,columnNumber:10}},props=>/*#__PURE__*/React.createElement(\"div\",{__self:this,__source:{fileName:_jsxFileName,lineNumber:80,columnNumber:9}},/*#__PURE__*/React.createElement(SearchBar,Object.assign({},props.searchProps,{__self:this,__source:{fileName:_jsxFileName,lineNumber:81,columnNumber:11}})),/*#__PURE__*/React.createElement(BootstrapTable,Object.assign({},props.baseProps,{headerClasses:\"thead-dark\",striped:true,hover:true,condensed:true,pagination:paginationFactory(),noDataIndication:()=>/*#__PURE__*/React.createElement(NoDataIndication,{__self:this,__source:{fileName:_jsxFileName,lineNumber:88,columnNumber:52}}),filter:filterFactory(),__self:this,__source:{fileName:_jsxFileName,lineNumber:82,columnNumber:11}})),/*#__PURE__*/React.createElement(ExportCSV,Object.assign({},props.csvProps,{__self:this,__source:{fileName:_jsxFileName,lineNumber:90,columnNumber:11}}))));}export default Table;","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/src/components/Tables/Table.jsx"],"names":["Spinner","BootstrapTable","ToolkitProvider","Search","filterFactory","paginationFactory","React","ExportCSV","SearchBar","NoDataIndication","add_column","columns","dataField","text","push","sort","headerTitle","create_data_arrays","data","columnTitles","table_data","first_datafield","second_datafield","key","hasOwnProperty","row","Table","undefined","length","forEach","element","props","searchProps","baseProps","csvProps"],"mappings":"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","sourcesContent":["import { Spinner } from \"react-bootstrap\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport React from 'react';\nimport ExportCSV from \"../CustomButton/ExportCSVButton\";\nconst { SearchBar } = Search;\n\nconst NoDataIndication = () => (\n  <div>\n    <p>Looks like there is no data...</p>\n  </div>\n);\n\n/**\n * Add a column to the table\n * @param columns: the {Array} on which the data will be added.\n * @param dataField: str the identifier (name) of the datafield\n * @param text: str to be shown as header.\n */\nfunction add_column(columns, dataField, text){\n  columns.push({\n    dataField: dataField,\n    text: text,\n    sort: true,\n    headerTitle: true,\n  })\n}\n\n/**\n * Creats the structure needed for showing a table for dict data.\n * @param data: object as dict(key, value)\n * @param columnTitles: header titles\n * @returns {Array}\n */\nfunction create_data_arrays(data, columnTitles){\n  let table_data = [];\n  let first_datafield = columnTitles[0];\n  let second_datafield = columnTitles[1];\n  for (let key in data) {\n    if (data.hasOwnProperty(key)) {\n      let row = {};\n      row[first_datafield] = key;\n      row[second_datafield] = data[key];\n      table_data.push(row);\n    }\n  }\n\n  return table_data\n}\n\n\n/**\n * Creates a basic table from the given data.\n * @param data: the data to show in the table.\n * @param columnTitles: the header title of the column\n * @returns {*}\n * @constructor\n */\nfunction Table({data, columnTitles}) {\n  if(!data || data === undefined || data.length === 0) return <Spinner animation=\"border\" variant=\"primary\" size=\"mg\"/>;\n  //console.log(\"tableData\", data);\n  let columns = [];\n  let table_data = [];\n  columnTitles.forEach(element => add_column(columns, element, element));\n  if (columnTitles.length === 2){\n    table_data = create_data_arrays(data, columnTitles)\n  }\n\n  return <ToolkitProvider\n    keyField={ columnTitles[0] }\n    data={ table_data }\n    columns={ columns }\n    exportCSV\n    search\n  >\n    {\n      props => (\n        <div>\n          <SearchBar { ...props.searchProps } />\n          <BootstrapTable { ...props.baseProps }\n                          headerClasses=\"thead-dark\"\n                          striped\n                          hover\n                          condensed\n                          pagination={ paginationFactory() }\n                          noDataIndication={ () => <NoDataIndication /> }\n                          filter={ filterFactory() }/>\n          <ExportCSV { ...props.csvProps } />\n        </div>\n      )\n    }\n  </ToolkitProvider>\n}\n\nexport default Table;\n\n\n"]},"metadata":{},"sourceType":"module"}