{"ast":null,"code":"/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { spring } from 'react-motion';\nimport { rgb } from 'd3-color';\n/**\n * Decompose a color for use with react-motion.\n *\n * @param {string} _color\n * @param {Object} [_config]\n * @return {Object}\n */\n\nexport var colorMotionSpring = function colorMotionSpring(_color, _config) {\n  var color = rgb(_color);\n  if (!_config) return {\n    colorR: color.r,\n    colorG: color.g,\n    colorB: color.b\n  };\n  var config = Object.assign({}, _config, {\n    precision: 1\n  });\n  return {\n    colorR: spring(color.r, config),\n    colorG: spring(color.g, config),\n    colorB: spring(color.b, config)\n  };\n};\n/**\n * Re-assemble interpolated color components for easy use.\n *\n * @param {number} colorR\n * @param {number} colorG\n * @param {number} colorB\n * @return {string}\n */\n\nexport var getInterpolatedColor = function getInterpolatedColor(_ref) {\n  var colorR = _ref.colorR,\n      colorG = _ref.colorG,\n      colorB = _ref.colorB;\n  return 'rgb(' + Math.round(Math.max(colorR, 0)) + ',' + Math.round(Math.max(colorG, 0)) + ',' + Math.round(Math.max(colorB, 0)) + ')';\n};","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/node_modules/nivo/es/lib/colors/motion.js"],"names":["spring","rgb","colorMotionSpring","_color","_config","color","colorR","r","colorG","g","colorB","b","config","Object","assign","precision","getInterpolatedColor","_ref","Math","round","max"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,GAAT,QAAoB,UAApB;AAEA;;;;;;;;AAOA,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,MAA3B,EAAmCC,OAAnC,EAA4C;AACvE,MAAIC,KAAK,GAAGJ,GAAG,CAACE,MAAD,CAAf;AAEA,MAAI,CAACC,OAAL,EAAc,OAAO;AACjBE,IAAAA,MAAM,EAAED,KAAK,CAACE,CADG;AAEjBC,IAAAA,MAAM,EAAEH,KAAK,CAACI,CAFG;AAGjBC,IAAAA,MAAM,EAAEL,KAAK,CAACM;AAHG,GAAP;AAMd,MAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,OAAlB,EAA2B;AAAEW,IAAAA,SAAS,EAAE;AAAb,GAA3B,CAAb;AAEA,SAAO;AACHT,IAAAA,MAAM,EAAEN,MAAM,CAACK,KAAK,CAACE,CAAP,EAAUK,MAAV,CADX;AAEHJ,IAAAA,MAAM,EAAER,MAAM,CAACK,KAAK,CAACI,CAAP,EAAUG,MAAV,CAFX;AAGHF,IAAAA,MAAM,EAAEV,MAAM,CAACK,KAAK,CAACM,CAAP,EAAUC,MAAV;AAHX,GAAP;AAKH,CAhBM;AAkBP;;;;;;;;;AAQA,OAAO,IAAII,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AAClE,MAAIX,MAAM,GAAGW,IAAI,CAACX,MAAlB;AAAA,MACIE,MAAM,GAAGS,IAAI,CAACT,MADlB;AAAA,MAEIE,MAAM,GAAGO,IAAI,CAACP,MAFlB;AAGA,SAAO,SAASQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASd,MAAT,EAAiB,CAAjB,CAAX,CAAT,GAA2C,GAA3C,GAAiDY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASZ,MAAT,EAAiB,CAAjB,CAAX,CAAjD,GAAmF,GAAnF,GAAyFU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASV,MAAT,EAAiB,CAAjB,CAAX,CAAzF,GAA2H,GAAlI;AACH,CALM","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { spring } from 'react-motion';\nimport { rgb } from 'd3-color';\n\n/**\n * Decompose a color for use with react-motion.\n *\n * @param {string} _color\n * @param {Object} [_config]\n * @return {Object}\n */\nexport var colorMotionSpring = function colorMotionSpring(_color, _config) {\n    var color = rgb(_color);\n\n    if (!_config) return {\n        colorR: color.r,\n        colorG: color.g,\n        colorB: color.b\n    };\n\n    var config = Object.assign({}, _config, { precision: 1 });\n\n    return {\n        colorR: spring(color.r, config),\n        colorG: spring(color.g, config),\n        colorB: spring(color.b, config)\n    };\n};\n\n/**\n * Re-assemble interpolated color components for easy use.\n *\n * @param {number} colorR\n * @param {number} colorG\n * @param {number} colorB\n * @return {string}\n */\nexport var getInterpolatedColor = function getInterpolatedColor(_ref) {\n    var colorR = _ref.colorR,\n        colorG = _ref.colorG,\n        colorB = _ref.colorB;\n    return 'rgb(' + Math.round(Math.max(colorR, 0)) + ',' + Math.round(Math.max(colorG, 0)) + ',' + Math.round(Math.max(colorB, 0)) + ')';\n};"]},"metadata":{},"sourceType":"module"}