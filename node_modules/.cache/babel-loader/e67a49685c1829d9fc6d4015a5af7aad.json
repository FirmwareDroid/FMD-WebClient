{"ast":null,"code":"/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport pure from 'recompose/pure';\n/**\n *\n * @param {string} axis\n * @param {number} width\n * @param {number} height\n * @param {string} position\n * @param {number} offsetX\n * @param {number} offsetY\n * @param {string} orientation\n * @return {{ x: number, y: number, textAnchor: string }}\n */\n\nvar computeLabel = function computeLabel(_ref) {\n  var axis = _ref.axis,\n      width = _ref.width,\n      height = _ref.height,\n      position = _ref.position,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      orientation = _ref.orientation;\n  var x = 0;\n  var y = 0;\n  var rotation = orientation === 'vertical' ? -90 : 0;\n  var textAnchor = 'start';\n\n  if (axis === 'x') {\n    switch (position) {\n      case 'top-left':\n        x = -offsetX;\n        y = offsetY;\n        textAnchor = 'end';\n        break;\n\n      case 'top':\n        y = -offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'top-right':\n        x = offsetX;\n        y = offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'right':\n        x = offsetX;\n        y = height / 2;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n\n      case 'bottom-right':\n        x = offsetX;\n        y = height - offsetY;\n        textAnchor = 'start';\n        break;\n\n      case 'bottom':\n        y = height + offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'bottom-left':\n        y = height - offsetY;\n        x = -offsetX;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'left':\n        x = -offsetX;\n        y = height / 2;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n    }\n  } else {\n    switch (position) {\n      case 'top-left':\n        x = offsetX;\n        y = -offsetY;\n        textAnchor = 'start';\n        break;\n\n      case 'top':\n        x = width / 2;\n        y = -offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'top-right':\n        x = width - offsetX;\n        y = -offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'start';\n        }\n\n        break;\n\n      case 'right':\n        x = width + offsetX;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n\n      case 'bottom-right':\n        x = width - offsetX;\n        y = offsetY;\n        textAnchor = 'end';\n        break;\n\n      case 'bottom':\n        x = width / 2;\n        y = offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'middle';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'bottom-left':\n        x = offsetX;\n        y = offsetY;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'start';\n        } else {\n          textAnchor = 'end';\n        }\n\n        break;\n\n      case 'left':\n        x = -offsetX;\n\n        if (orientation === 'horizontal') {\n          textAnchor = 'end';\n        } else {\n          textAnchor = 'middle';\n        }\n\n        break;\n    }\n  }\n\n  return {\n    x: x,\n    y: y,\n    rotation: rotation,\n    textAnchor: textAnchor\n  };\n};\n\nvar CartesianMarkersItem = function CartesianMarkersItem(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      axis = _ref2.axis,\n      scale = _ref2.scale,\n      value = _ref2.value,\n      theme = _ref2.theme,\n      lineStyle = _ref2.lineStyle,\n      textStyle = _ref2.textStyle,\n      legend = _ref2.legend,\n      legendPosition = _ref2.legendPosition,\n      legendOffsetX = _ref2.legendOffsetX,\n      legendOffsetY = _ref2.legendOffsetY,\n      legendOrientation = _ref2.legendOrientation;\n  var x = 0;\n  var x2 = 0;\n  var y = 0;\n  var y2 = 0;\n\n  if (axis === 'y') {\n    y = scale(value);\n    x2 = width;\n  } else {\n    x = scale(value);\n    y2 = height;\n  }\n\n  var legendNode = null;\n\n  if (legend) {\n    var legendProps = computeLabel({\n      axis: axis,\n      width: width,\n      height: height,\n      position: legendPosition,\n      offsetX: legendOffsetX,\n      offsetY: legendOffsetY,\n      orientation: legendOrientation\n    });\n    legendNode = React.createElement('text', {\n      transform: 'translate(' + legendProps.x + ', ' + legendProps.y + ') rotate(' + legendProps.rotation + ')',\n      textAnchor: legendProps.textAnchor,\n      alignmentBaseline: 'central',\n      style: textStyle\n    }, legend);\n  }\n\n  return React.createElement('g', {\n    transform: 'translate(' + x + ', ' + y + ')'\n  }, React.createElement('line', {\n    x1: 0,\n    x2: x2,\n    y1: 0,\n    y2: y2,\n    stroke: theme.markers.lineColor,\n    strokeWidth: theme.markers.lineStrokeWidth,\n    style: lineStyle\n  }), legendNode);\n};\n\nCartesianMarkersItem.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  axis: PropTypes.oneOf(['x', 'y']).isRequired,\n  scale: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  lineStyle: PropTypes.object,\n  textStyle: PropTypes.object,\n  legend: PropTypes.string,\n  legendPosition: PropTypes.oneOf(['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left']),\n  legendOffsetX: PropTypes.number.isRequired,\n  legendOffsetY: PropTypes.number.isRequired,\n  legendOrientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n  theme: PropTypes.shape({\n    markers: PropTypes.shape({\n      textColor: PropTypes.string.isRequired,\n      fontSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n    }).isRequired\n  }).isRequired\n};\nCartesianMarkersItem.defaultProps = {\n  legendPosition: 'top-right',\n  legendOffsetX: 14,\n  legendOffsetY: 14,\n  legendOrientation: 'horizontal'\n};\nexport default pure(CartesianMarkersItem);","map":{"version":3,"sources":["/Users/tom/Documents/MSE/zz_MasterThesis/06_FirmwareDroid/firmware-droid-client/node_modules/nivo/es/components/cartesian/markers/CartesianMarkersItem.js"],"names":["React","PropTypes","pure","computeLabel","_ref","axis","width","height","position","offsetX","offsetY","orientation","x","y","rotation","textAnchor","CartesianMarkersItem","_ref2","scale","value","theme","lineStyle","textStyle","legend","legendPosition","legendOffsetX","legendOffsetY","legendOrientation","x2","y2","legendNode","legendProps","createElement","transform","alignmentBaseline","style","x1","y1","stroke","markers","lineColor","strokeWidth","lineStrokeWidth","propTypes","number","isRequired","oneOf","func","oneOfType","string","object","shape","textColor","fontSize","defaultProps"],"mappings":"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","sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport pure from 'recompose/pure';\n\n/**\n *\n * @param {string} axis\n * @param {number} width\n * @param {number} height\n * @param {string} position\n * @param {number} offsetX\n * @param {number} offsetY\n * @param {string} orientation\n * @return {{ x: number, y: number, textAnchor: string }}\n */\nvar computeLabel = function computeLabel(_ref) {\n    var axis = _ref.axis,\n        width = _ref.width,\n        height = _ref.height,\n        position = _ref.position,\n        offsetX = _ref.offsetX,\n        offsetY = _ref.offsetY,\n        orientation = _ref.orientation;\n\n    var x = 0;\n    var y = 0;\n    var rotation = orientation === 'vertical' ? -90 : 0;\n    var textAnchor = 'start';\n\n    if (axis === 'x') {\n        switch (position) {\n            case 'top-left':\n                x = -offsetX;\n                y = offsetY;\n                textAnchor = 'end';\n                break;\n            case 'top':\n                y = -offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'top-right':\n                x = offsetX;\n                y = offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'right':\n                x = offsetX;\n                y = height / 2;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n            case 'bottom-right':\n                x = offsetX;\n                y = height - offsetY;\n                textAnchor = 'start';\n                break;\n            case 'bottom':\n                y = height + offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'bottom-left':\n                y = height - offsetY;\n                x = -offsetX;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'left':\n                x = -offsetX;\n                y = height / 2;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n        }\n    } else {\n        switch (position) {\n            case 'top-left':\n                x = offsetX;\n                y = -offsetY;\n                textAnchor = 'start';\n                break;\n            case 'top':\n                x = width / 2;\n                y = -offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'top-right':\n                x = width - offsetX;\n                y = -offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'right':\n                x = width + offsetX;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n            case 'bottom-right':\n                x = width - offsetX;\n                y = offsetY;\n                textAnchor = 'end';\n                break;\n            case 'bottom':\n                x = width / 2;\n                y = offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'bottom-left':\n                x = offsetX;\n                y = offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'left':\n                x = -offsetX;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n        }\n    }\n\n    return { x: x, y: y, rotation: rotation, textAnchor: textAnchor };\n};\n\nvar CartesianMarkersItem = function CartesianMarkersItem(_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height,\n        axis = _ref2.axis,\n        scale = _ref2.scale,\n        value = _ref2.value,\n        theme = _ref2.theme,\n        lineStyle = _ref2.lineStyle,\n        textStyle = _ref2.textStyle,\n        legend = _ref2.legend,\n        legendPosition = _ref2.legendPosition,\n        legendOffsetX = _ref2.legendOffsetX,\n        legendOffsetY = _ref2.legendOffsetY,\n        legendOrientation = _ref2.legendOrientation;\n\n    var x = 0;\n    var x2 = 0;\n    var y = 0;\n    var y2 = 0;\n\n    if (axis === 'y') {\n        y = scale(value);\n        x2 = width;\n    } else {\n        x = scale(value);\n        y2 = height;\n    }\n\n    var legendNode = null;\n    if (legend) {\n        var legendProps = computeLabel({\n            axis: axis,\n            width: width,\n            height: height,\n            position: legendPosition,\n            offsetX: legendOffsetX,\n            offsetY: legendOffsetY,\n            orientation: legendOrientation\n        });\n        legendNode = React.createElement(\n            'text',\n            {\n                transform: 'translate(' + legendProps.x + ', ' + legendProps.y + ') rotate(' + legendProps.rotation + ')',\n                textAnchor: legendProps.textAnchor,\n                alignmentBaseline: 'central',\n                style: textStyle\n            },\n            legend\n        );\n    }\n\n    return React.createElement(\n        'g',\n        { transform: 'translate(' + x + ', ' + y + ')' },\n        React.createElement('line', {\n            x1: 0,\n            x2: x2,\n            y1: 0,\n            y2: y2,\n            stroke: theme.markers.lineColor,\n            strokeWidth: theme.markers.lineStrokeWidth,\n            style: lineStyle\n        }),\n        legendNode\n    );\n};\n\nCartesianMarkersItem.propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    scale: PropTypes.func.isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    lineStyle: PropTypes.object,\n    textStyle: PropTypes.object,\n\n    legend: PropTypes.string,\n    legendPosition: PropTypes.oneOf(['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left']),\n    legendOffsetX: PropTypes.number.isRequired,\n    legendOffsetY: PropTypes.number.isRequired,\n    legendOrientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n\n    theme: PropTypes.shape({\n        markers: PropTypes.shape({\n            textColor: PropTypes.string.isRequired,\n            fontSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n        }).isRequired\n    }).isRequired\n};\n\nCartesianMarkersItem.defaultProps = {\n    legendPosition: 'top-right',\n    legendOffsetX: 14,\n    legendOffsetY: 14,\n    legendOrientation: 'horizontal'\n};\n\nexport default pure(CartesianMarkersItem);"]},"metadata":{},"sourceType":"module"}